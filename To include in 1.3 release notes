*** Constraint and comparer changes
- Added BaseConstraint
- AttributeConstraint is now a BaseConstraint
- Renamed NotAttributeConstraint to NotConstraint. Inherits from BaseConstraint
- Renamed IndexAttributeConstraint to IndexConstraint. Inherits from BaseConstraint
- Renamed AlwaysTrueAttributeConstraint to AlwaysTrueConstraint. Inherits from BaseConstraint
- Refactored code to make use of BaseConstraint where possible
- StringComparer can now do case insensitive compare as well
- Added StringComparer.AreEqual static methods
- Moved constraint classes into their own namespace WatiN.Core.Constraints.
- Added ElementConstraint
- Fixed bug where Constraints with state where not reset before they where reused.
  - Added virtual method Reset to BaseConstraint
  - overridden Reset in IndexConstraint to clear state.
- ElementConstraint also accepts Element as a valid attributebag
- Cleaned up PredicateComparer (split into PredicateStringComparer and PredicateElementComparer)

*** New WaitXXX methods
- Added WaitForComplete(timeout) to IE and DomContainer. Use this if you incidentally need a different timeout then specified by IE.Settings.WaitForCompleteTimeOut. 
- Made the Thread.Sleep time (default 100 milliseconds) configurable with WaitForComplete.MilliSecondsTimeOut. There is no IE.Settings yet, that will come. For now the new Sleep method logs to the console which methods call Sleep to get a feeling about wait times.
- Added IE.AttachtToIENoWait(Findby[, timeout]) SF feature request 1943370: AttachToIENoWait() method for handling PDF windows
- Added IE.GoToNoWait(string or Uri). Thanks to Martin Sponholtz for this contrib
- had to exclude IE.GoToNoWait for .Net 1.1
- Added IE.InternetExplorers(waitForComplete).
- Use this method if you want WatiN to skip calling the WaitForComplete method on an InternetExplorer instance before it is returned from the collection.
- Renamed IE.InternetExplorers(waitForComplete) to IE.InternetExplorersNoWait()
- Added IE.HtmlDialogsNoWait()
- Added Document.WaitUntilContainsText(string) and Document.WaitUntilContainsText(regex)
- Added WaitUntilContainsText(string/regex, timeout) overloads
- Added message to HtmlDialogNotFoundException about possible pop-up blocker being active
- Added FireEventNoWait(event, eventProperties)

*** Table changes
Fixed issue where Table.FindRow() was evaluating tablecells in a nested table.
If users used this "bug" as a feature, tests might fail due to this fix.
Added overloads FindRow(ICompare) and FindRow(Predicate<string>)
Implemented Table.FindRow(Predicate<TableCell>). Now you can write:
ie.Table(findBy).FindRow(c => Equals(c.Text, "Some text"));
- TableRow.TableCellsDirectChildren added which only returns the direct child cells (speed!!)
- Added TableRowsDirectChildren to Table and TableBody
- Added Table.FindRowInDirectChildren

*** MISC.
- Made DomContainer.OnGetHtmlDocument public (instead of internal) so DomContainer can be inherited by classes outside of the WatiN assembly.
- Added static method ElementTag.IsAnInputElement(string tagName)
- Made Element implement IAttributeBag
- Jeff Brown fixed an issue where the IE.InternetExplorers property sometimes picked up Windows Explorer windows in which case a timeout exception was thrown.
- Made a (small) performance improvement when searching elements by exact id.
- Made DomContainer property on Document public
- Added url to the message of ElementNotFoundException
- Fixed test to make a "proof of concept" VisibleAttribute class work. Can be very handy in case of AJAX websites testing (like the ASP.Net AJAX ModalPopupExtender control which is used to test against). This AttributeConstraint might move over to the Core someday.
- Added possibility to find a Frame or IFrame by any of its (custom) attributes.
- Added Frame.GetAttributeValue(attributename) to get any of the Frame or IFrame (custom) attributes.
- Added possibility to find an Ancestor of an element using a predicate or lambda expression

*** New filtering options on collections
- Added BaseElementCollection.First and First(BaseConstraint)
now you can write 
TextField first = ie.TextFields.First(constraint);
instead of 
TextField first = ie.TextFields.Filter(constraint)[0];

- Added App.config so tests can run using ReSharper 4.0

Introduced Element<E> and ElementsContainer<E> (if .net 20 or higher) to support element.WaitUntil(Predicate<T>). 

This is a BREAKING change cause this syntax won't work any longer (with .net 2.0 or higher):

ElementsContainer div = ie.Div(findBy);

Change it into:

IElementsContainer div = ie.Div(findBy);

or

ElementsContainer<Div> div = ie.Div(findBy);

- Added possibility to Filter a collection of elements using a predicate or lambda expression. Example:

DivCollection divs = ie.Divs.Filter(d => d.name.StartsWith("i"));


*** Strong naming
- Added strong name to the Nant build for Core and UnitTests (WatiNKey.snk is not in the repository!)
- Fixed Nant build for .Net 2.0 (and higher)

*** Changes to Settings and new Settings
- Added new Setting.SleepTime to tweak waiting time when WatiN searches for an element. This value is used by WaitForComplete.
- Finished refactoring of Settings class to a static class which uses a class (DefaultSettings) which implements ISettings (same pattern as used for Logger/LogWriter. If you did inherit from Settings you should now inherit from DefaultSettings. You can also create your own settings class by implementing ISettings and assign an instance to the Settings.Instance property.
- Renamed IDefaultFindFactory to IFindByDefaultFactory
- Renamed DefaultFindFactory to FindByDefaultFactory
- Added the possibility to globally use a different finder in every element method on IE (document) and ElementContainers (like Div) which currently only excepts an id. Example: Find elements by their Asp ids instead of having to use a regex over and over again:

// First create a factory which implements IDefaultFindFactory and creates a regex of the given string
class FindByAspIdFactory : IDefaultFindFactory
{
  public BaseConstaint ByDefault(string value) { return new Find.ById(new Regex(value + "$") }
  public BaseConstaint ByDefault(Regex value) { return new Find.ById(value) }
}

// Then assign it to the setting DefaultFindFactory
Settings.Instance.DefaultFindFactory = new FindByAspIdFactory();

// Now start finding elements by there asp id like this. Lets assume we are looking for an element
// with the id "container1_somemore_NextButton"
Button nextButton = ie.Button("NextButton"); // Instead of previous ie.Button(new Regex("NextButton$"));